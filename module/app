
import streamlit as st
import pandas as pd
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode
import plotly.express as px
from threshold_engine import assign_final_groups, get_group_bounds
from trade_analyzer import compute_thresholds_and_alerts
from visualizer import map_currency_groups, prepare_group_summary, prepare_entity_alerts, plot_alert_volume_chart

st.set_page_config(layout="wide", page_title="GFX Threshold Backtester App")
st.title("üìà GFX Threshold Backtesting App")

# File Upload
st.header("Step 1: Upload Files")
col1, col2 = st.columns(2)

with col1:
    group_file = st.file_uploader("Upload Threshold Mapping File", type=["csv", "xlsx"])
with col2:
    trade_file = st.file_uploader("Upload Trade File", type=["csv", "xlsx"])

edit_mode = st.radio("Edit Mode", ["Group-Wise", "Currency-Wise"], horizontal=True)

if group_file and trade_file:
    # Load files
    full_df = pd.read_excel(group_file) if group_file.name.endswith("xlsx") else pd.read_csv(group_file)
    trade_df = pd.read_excel(trade_file) if trade_file.name.endswith("xlsx") else pd.read_csv(trade_file)

    group_bounds = get_group_bounds(full_df)

    col3, col4 = st.columns([2.5, 1.5])
    with col3:
        st.subheader("‚úèÔ∏è Edit Thresholds")

        editable_df = full_df[["CCY", "Proposed_Group", "Old_Threshold", "Proposed_Threshold"]].copy()
        editable_df.rename(columns={"Proposed_Group": "Group"}, inplace=True)
        editable_df["Final_Threshold"] = editable_df["Proposed_Threshold"]

        if st.button("Reset Final Thresholds"):
            editable_df["Final_Threshold"] = editable_df["Proposed_Threshold"]

        gb = GridOptionsBuilder.from_dataframe(editable_df)
        gb.configure_columns(["Final_Threshold", "Group"], editable=True)
        grid_output = AgGrid(editable_df, gridOptions=gb.build(), update_mode=GridUpdateMode.VALUE_CHANGED, height=400)
        currency_df = grid_output["data"]
        currency_df = assign_final_groups(currency_df, group_bounds)

    with col4:
        st.subheader("Summary Stats")
        st.metric("Total Trades", len(trade_df))
        st.metric("Currency Pairs", trade_df["Instrument"].nunique())
        st.metric("Legal Entities", trade_df["LegalEntity"].nunique())

    # Threshold calculations
    trade_df = compute_thresholds_and_alerts(trade_df, currency_df)

    st.metric("Alerts wrt Existing Threshold", int(trade_df["Alert_Old"].sum()))
    st.metric("Alerts After Calibration", int(trade_df["Alert_Final"].sum()))
    st.metric("No Alerts", int((~trade_df["Alert_Final"]).sum()))

    # Visual Summary
    st.header("Step 2: Visual Summary")
    st.subheader("üìä Group-wise Impact Summary")

    trade_df = map_currency_groups(trade_df, currency_df)
    summary = prepare_group_summary(trade_df, currency_df)
    st.dataframe(summary)

    fig = plot_alert_volume_chart(trade_df)
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("Legal Entity Breakdown")
    fig2, entity_df = prepare_entity_alerts(trade_df)
    st.plotly_chart(fig2, use_container_width=True)

    with st.expander("Toggle Views: Chart or Table"):
        view_mode = st.radio("Select View", ["Aggregate Chart", "Legal Entity Table"], horizontal=True)
        if view_mode == "Legal Entity Table":
            entity_pivot = entity_df.pivot(index="LegalEntity", columns="Scenario", values="Alert Count").fillna(0).reset_index()
            st.dataframe(entity_pivot)

    st.download_button("Download Full Trade Analysis", trade_df.to_csv(index=False), "fx_alert_comparison_final.csv", "text/csv")

    st.subheader("Audit Trail")
    audit_df = currency_df.copy()
    audit_df["Changed?"] = audit_df["Final_Threshold"] != audit_df["Proposed_Threshold"]
    audit_df["Change %"] = ((audit_df["Final_Threshold"] - audit_df["Proposed_Threshold"]) / audit_df["Proposed_Threshold"]).round(3)
    st.dataframe(audit_df)
    st.download_button("Download Audit Trail", audit_df.to_csv(index=False), "threshold_audit_trail.csv", "text/csv")
