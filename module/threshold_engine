# threshold_engine.py

import pandas as pd

def get_group_bounds(df):
    return df.groupby("Proposed_Group")["Proposed_Threshold"].first().sort_values().to_dict()

def assign_group(threshold, group_bounds):
    for group, bound in group_bounds.items():
        if threshold <= bound:
            return group
    return list(group_bounds.keys())[-1]

def prepare_currency_df(full_df, final_threshold_col="Final_Threshold"):
    group_bounds = get_group_bounds(full_df)
    full_df["Final_Group"] = full_df[final_threshold_col].apply(lambda x: assign_group(x, group_bounds))
    return full_df, group_bounds

def build_threshold_maps(currency_df):
    return {
        "old": currency_df.set_index("CCY")["Old_Threshold"].to_dict(),
        "proposed": currency_df.set_index("CCY")["Proposed_Threshold"].to_dict(),
        "final": currency_df.set_index("CCY")["Final_Threshold"].to_dict()
    }

def get_max_threshold_for_instr(instrument, mapping):
    try:
        base, quote = instrument.split("/")
        return max(mapping.get(base, 0), mapping.get(quote, 0))
    except:
        return 0

def map_groups_to_instruments(trade_df, currency_df):
    ccy_group_map = currency_df.set_index("CCY")["Final_Group"].to_dict()

    def get_group(instr):
        try:
            base, quote = instr.split("/")
            return max(ccy_group_map.get(base, "Group 1"), ccy_group_map.get(quote, "Group 1"))
        except:
            return "Group 1"

    trade_df["Group"] = trade_df["Instrument"].apply(get_group)
    return trade_df
