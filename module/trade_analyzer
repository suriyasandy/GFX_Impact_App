# trade_analyzer.py

import pandas as pd
from threshold_engine import get_max_threshold_for_instr

def apply_thresholds(trade_df, threshold_maps):
    trade_df["Threshold_Old"] = trade_df["Instrument"].map(lambda x: get_max_threshold_for_instr(x, threshold_maps["old"]))
    trade_df["Threshold_Proposed"] = trade_df["Instrument"].map(lambda x: get_max_threshold_for_instr(x, threshold_maps["proposed"]))
    trade_df["Threshold_Final"] = trade_df["Instrument"].map(lambda x: get_max_threshold_for_instr(x, threshold_maps["final"]))

    trade_df["Alert_Old"] = trade_df["deviation_percent"] > trade_df["Threshold_Old"]
    trade_df["Alert_Proposed"] = trade_df["deviation_percent"] > trade_df["Threshold_Proposed"]
    trade_df["Alert_Final"] = trade_df["deviation_percent"] > trade_df["Threshold_Final"]

    return trade_df

def summarize_by_group(currency_df, trade_df):
    group_summary = currency_df.groupby("Final_Group")["CCY"].agg(list).reset_index().rename(columns={"Final_Group": "Group", "CCY": "Currencies"})
    group_summary["Currencies"] = group_summary["Currencies"].apply(lambda x: ", ".join(sorted(x)))
    alert_summary = trade_df.groupby("Group")[["Alert_Old", "Alert_Proposed", "Alert_Final"]].sum().reset_index()
    alert_summary["Total_Trades"] = trade_df.groupby("Group")["Instrument"].count().values

    return pd.merge(group_summary, alert_summary, on="Group", how="left")

def summarize_by_entity(trade_df):
    entity_df = trade_df.groupby("LegalEntity")[["Alert_Old", "Alert_Proposed", "Alert_Final"]].sum().reset_index()
    return entity_df
