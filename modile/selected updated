from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode
import streamlit as st
import pandas as pd

# Example: your summary DataFrame
entity_summary_df = generate_legal_entity_summary(alert_results, start_date, end_date)

# Setup AgGrid
gb = GridOptionsBuilder.from_dataframe(entity_summary_df)
gb.configure_selection("single", use_checkbox=True)
grid_options = gb.build()

grid_output = AgGrid(
    entity_summary_df,
    gridOptions=grid_options,
    fit_columns_on_grid_load=True,
    update_mode=GridUpdateMode.SELECTION_CHANGED,
    height=300
)

# Extract selection
selected = grid_output["selected_rows"]

if selected:
    selected_row = selected[0]  # this is a dict
    st.subheader("You selected:")
    st.json(selected_row)

    # Extract values
    selected_legal = selected_row.get("LegalEntity")
    selected_source = selected_row.get("Source")
    selected_date_range = selected_row.get("date_range")

    # Split start/end from date_range (assumes format: 'YYYY-MM-DD - YYYY-MM-DD' or similar)
    try:
        start_dt, end_dt = selected_date_range.split("â€“") if "â€“" in selected_date_range else selected_date_range.split("-")
        start_dt, end_dt = pd.to_datetime(start_dt.strip()), pd.to_datetime(end_dt.strip())
    except:
        start_dt, end_dt = start_date, end_date  # fallback to global

    # Filter the alert_results DataFrame
    filtered_df = alert_results[
        (alert_results["LegalEntity"] == selected_legal) &
        (alert_results["Source"] == selected_source) &
        (pd.to_datetime(alert_results["Date"]) >= start_dt) &
        (pd.to_datetime(alert_results["Date"]) <= end_dt)
    ]

    st.subheader("ðŸ”Ž Filtered Alert Records")
    st.dataframe(filtered_df)
