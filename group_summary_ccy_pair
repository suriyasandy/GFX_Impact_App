# Precompute dictionary mapping CCY â†’ Final_Group
ccy_group_map = currency_df.set_index("CCY")["Final_Group"].to_dict()

# Optimized function using precomputed map
def get_group_fast(instr):
    try:
        base, quote = instr.split("/")
        g1 = ccy_group_map.get(base, "")
        g2 = ccy_group_map.get(quote, "")
        return max(g1, g2)  # Assumes max() gives higher group name if not equal
    except:
        return ""

# Apply optimized function
trade_df["CCY_Pair_Group"] = trade_df["Instrument"].apply(get_group_fast)

# Grouped summary table
summary_table = trade_df.groupby(["Instrument", "CCY_Pair_Group"]).agg(
    Total_Trades=('Instrument', 'count'),
    Alerts_Before=('Alert_Old', 'sum'),
    Alerts_After=('Alert_Final', 'sum')
).reset_index().rename(columns={"Instrument": "CCY_Pair", "CCY_Pair_Group": "Group"})

# Display
st.dataframe(summary_table)
